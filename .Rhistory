library(shiny); runApp('covid-test.R')
value <- loadData("studies")
loadData <- function(table) {
# Connect to the database
db <- dbConnect(MySQL(), dbname = databaseName, host = options()$mysql$host,
port = options()$mysql$port, user = options()$mysql$user,
password = options()$mysql$password)
# Construct the fetching query
query <- sprintf("SELECT * FROM %s", table)
data <- dbGetQuery(db, query)
dbDisconnect(db)
data
}
options(mysql = list(
"host" = "david.prib.upf.edu",
"port" = 3306,
"user" = "psebastian"
# , "password" = "mypassword"
))
databaseName <- "biomarkers_2022"
value <- loadData("studies")
value
View(value)
class(value)
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
value
value <- loadData("gene-disease")
library(RMySQL)
value <- loadData("gene-disease")
value <- loadData("gene_disease")
v <- value %>% select(-geneid, -diseaseid)
View(v)
v <- value %>% select(-geneid, -diseaseid, -id, -sentenceHtml)
library(shiny); runApp('covid-test.R')
install.packages("bench")
library(shiny)
library(RMariaDB)
library(DT)
library(shinycssloaders)
library(dplyr)
con <- function() {
DBI::dbConnect(
MariaDB(),
host = "david.prib.upf.edu",
user = "psebastian",
dbname = "biomarkers_2022",
port = 3306)
}
gene_disease_loadData <- function(){
con <- con()
# Construct the fetching query
query <- "select gd.*, g.symbol, d.name from gene_disease as gd left join genes as g on gd.geneid = g.geneid left join diseases as d on gd.diseaseid = d.diseaseid"
data <- dbGetQuery(con, query)
data <- as.data.frame(data)
dbDisconnect(con)
return(data)
}
gene2 <- function(){
con <- con()
remote_genes <- tbl(con, "genes")
remote_disease <- tbl(con, "diseases")
remote_gd <- tbl(db_con, from = "gene_disease")
data <- remote_gd %>%
left_join(remotes_genes, by = "geneid") %>%
left_join(remotes_diseases, by = "diseaseid")
as.data.frame
}
d <- gene_disease_loadData()
d2 <- gene2()
gene2 <- function(){
con <- con()
remote_genes <- tbl(con, "genes")
remote_disease <- tbl(con, "diseases")
remote_gd <- tbl(con, from = "gene_disease")
data <- remote_gd %>%
left_join(remotes_genes, by = "geneid") %>%
left_join(remotes_diseases, by = "diseaseid")
as.data.frame
}
d2 <- gene2()
con <- con()
remote_genes <- tbl(con, "genes")
gene2 <- function(){
con <- con()
remote_genes <- tbl(con, "genes")
remote_disease <- tbl(con, "diseases")
remote_gd <- tbl(con, from = "gene_disease")
data <- remote_gd %>%
left_join(remote_genes, by = "geneid") %>%
left_join(remote_diseases, by = "diseaseid")
as.data.frame
}
d2 <- gene2()
con <- function() {
DBI::dbConnect(
MariaDB(),
host = "david.prib.upf.edu",
user = "psebastian",
dbname = "biomarkers_2022",
port = 3306)
}
d2 <- gene2()
gene2 <- function(){
con <- con()
remote_genes <- tbl(con, "genes")
remote_diseases <- tbl(con, "diseases")
remote_gd <- tbl(con, from = "gene_disease")
data <- remote_gd %>%
left_join(remote_genes, by = "geneid") %>%
left_join(remote_diseases, by = "diseaseid")
as.data.frame
}
d2 <- gene2()
d2
gene2 <- function(){
con <- con()
remote_genes <- tbl(con, "genes")
remote_diseases <- tbl(con, "diseases")
remote_gd <- tbl(con, from = "gene_disease")
data <- remote_gd %>%
left_join(remote_genes, by = "geneid") %>%
left_join(remote_diseases, by = "diseaseid") %>%
as.data.frame
}
d2 <- gene2()
gene2 <- function(){
con <- con()
remote_genes <- tbl(con, "genes")
remote_diseases <- tbl(con, "diseases")
remote_gd <- tbl(con, from = "gene_disease")
data <- remote_gd %>%
left_join(remote_genes, by = "geneid") %>%
left_join(remote_diseases, by = "diseaseid") %>%
as.data.frame
dbDisconnect(con)
return(data)
}
d2 <- gene2()
d
d2
colnames(d)
colnames(d2)
library(bench)
mark(
gene_disease_loadData(),
gene2(),
check = F
)
gene_disease_loadData <- function(){
con <- con()
# Construct the fetching query
query <- "select gd.*, g.symbol, d.name
from gene_disease as gd
left join genes as g
on gd.geneid = g.geneid
left join diseases as d
on gd.diseaseid = d.diseaseid"
data <- dbGetQuery(con, query)
data <- as.data.frame(data)
dbDisconnect(con)
return(data)
}
d <- gene_disease_loadData()
runApp('covid-test.R')
runApp('covid-test.R')
runApp('covid-test.R')
runApp('covid-test.R')
runApp('covid-test.R')
runApp('covid-test.R')
runApp('covid-test.R')
library(shiny); runApp('biomarkers-shiny.R')
